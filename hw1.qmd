---
title: "506hw1"
format: html
editor: visual
---

## Problem 1

```{r}
#| include: true
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
library(knitr)
library(broom)

# a. import the data
aba <- "https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone <- read_csv(aba, col_names = FALSE, show_col_types = FALSE)

colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_weight", "Shucked_weight", "Viscera_weight", "Shell_weight", "Rings")

# b. the number of observations belonging to each sex
table(abalone$Sex)

```

```{r}
# c. 1
weights <- c("Whole_weight", "Shucked_weight", "Viscera_weight", "Shell_weight")
sapply(abalone[weights], function(x) cor(x, abalone$Rings))

```

So shell weight has the highest correlation with rings.

```{r}
# c. 2
by(abalone, abalone$Sex, function(df) cor(df$Shell_weight, df$Rings))

```

For shell weight, infant has the highest correlation.

```{r}
# c. 3
maxr <- max(abalone$Rings)
abalone[abalone$Rings == maxr, 
        c("Whole_weight", "Shucked_weight", "Viscera_weight", "Shell_weight")]

```

The whole weight, shucked weight, viscera weight and shell weight of the abalone with the most rings are: 1.8075, 0.7055, 0.3215, 0.475.

```{r}
# c. 4
mean(abalone$Viscera_weight > abalone$Shell_weight) 

```

6.511851% of abalones have a viscera weight larger than their shell weight.

```{r}
# d
weights <- c("Whole_weight", "Shucked_weight", "Viscera_weight", "Shell_weight")
corr <- function(df) { sapply(df[weights], function(x) cor(x, df$Rings))}
table1 <- by(abalone, abalone$Sex, corr)
ma <- do.call(rbind, table1)
ma

```

```{r}
# e
# F, M
t.test(abalone$Rings[abalone$Sex == "F"],
       abalone$Rings[abalone$Sex == "M"])
# F, I
t.test(abalone$Rings[abalone$Sex == "F"],
       abalone$Rings[abalone$Sex == "I"])
# M, I
t.test(abalone$Rings[abalone$Sex == "M"],
       abalone$Rings[abalone$Sex == "I"])

```

For F and M, the mean number of rings for females is higher than for males. The difference is statistically significant with p = 0.00025. For F and I, females have much more rings than infants. The difference is highly significant with p \< 2.2e-16. For I and M, males have more rings than infants. The difference is significant with p \< 2.2e-16. They all show statistically significant differences in mean number of rings among the three sexes. Both males and females tend to have more rings than infants.

## Problem 2

```{r}
# a
food <- read_csv("https://dept.stat.lsa.umich.edu/~jerrick/courses/stat506_f25/data/food_expenditure.csv",
  show_col_types = FALSE )
```

```{r}
colnames(food)
```

```{r}
# b
simpli <- c(
  "id",                
  "age",              
  "household_size",
  "state",           
  "currency",         
  "food_total",       
  "food_grocery",     
  "food_dining",       
  "food_miscell",        
  "dineout_times",    
  "include_alcohol",  
  "assistance_program" )
names(food) <- simpli
```

```{r}
# c
before <- nrow(food)
usd <- subset(food, currency == "USD")
after <- nrow(usd)

before
after
```

```{r}
# d. age
usd <- subset(usd, age >= 18)
```

Exclude all respondents younger than 18.

```{r}
# e. state
valid_state <- state.abb
usd <- subset(usd, state %in% valid_state)

```

Keep only valid U.S. state abbreviations.

```{r}
# f.  food expenditures
usd <- subset(
  usd, food_total >= 0 &
    food_grocery >= 0 & 
    food_dining >= 0 & 
    food_miscell >= 0 )

```

Exclude rows with negative expenditures.

```{r}
# g. times of dining out
usd <- subset(
  usd,
  dineout_times >= 0 & dineout_times <= 21)
```

Exclude negative numbers. Exclude larger numbers—more than 22 times per week.

```{r}
# h.
final_n <- nrow(usd)
final_n
```

## Problem 3

```{r}
# a
#' nextCollatz
#' Compute the next number in the Collatz sequence.
#' @param n A positive integer.
#' @return The next positive integer in the Collatz sequence.
#' @examples
#' nextCollatz(5)   # returns 16
#' nextCollatz(16)  # returns 8
nextCollatz <- function(n) {
  if (!is.numeric(n) || n <= 0 || n != as.integer(n)) {
    stop("Input should be a positive integer.") }
  if (n %% 2 == 0) { return(n / 2) } 
  else { return(3 * n + 1) }
}

```

```{r}
# b
#' collatzSequence
#' Generate the full Collatz sequence starting from a positive integer
#' until it reaches 1. Uses the helper function `nextCollatz()`.
#' @param n A positive integer.
#' @return A list containing the vector of the entries in the Collatz sequence, beginning at the input and ending at 1; and the length of the Collatz sequence.
#' @examples
#' collatzSequence(5)  # returns 5 16  8  4  2  1
#' collatzSequence(19) # returns 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10  5 16  8  4  2  1
collatzSequence <- function(n) {
  if (!is.numeric(n) || n <= 0 || n != as.integer(n)) {
    stop("Input should be a positive integer.") }
  seq <- n
  while (n != 1) {
    n <- nextCollatz(n)  
    seq <- c(seq, n) }
  return(list(sequence = seq, length = length(seq)))
}

```

```{r}
collatzSequence(5)
```

```{r}
collatzSequence(19)
```

```{r}
# c
starts <- 100:500
lens <- sapply(starts, function(n) collatzSequence(n)$length)
shortest_lens   <- min(lens)
s_start <- starts[ which.min(lens) ]

longest_lens    <- max(lens)
l_start  <- starts[ which.max(lens) ]

cat("Shortest Collatz sequence:",
    "start =", s_start, "| length =", shortest_lens, "\n\n")
cat("Longest Collatz sequence:",
    "start =", l_start,  "| length =", longest_lens,  "\n")


```
